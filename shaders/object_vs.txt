#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;
layout (location = 3) in vec3 aTangent;
layout (location = 4) in vec3 aBitangent;

out vec2 TexCoords;
out vec3 Normal;
out vec3 FragPos;
out vec3 TangentLightPos;
out vec3 TangentViewPos;
out vec3 TangentFragPos;
out vec3 ViewPos;
out vec3 LightPos;

uniform vec3 viewPos;
uniform vec3 lightPos;
uniform mat4 model;
uniform vec2 textureScale;

layout (std140) uniform Matrices
{
	uniform mat4 projection;
	uniform mat4 view;
};

void main()
{
	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vec3 T = normalize(mat3(model) * aTangent);
	vec3 N = normalize(normalMatrix * aNormal);
	vec3 B = normalize(cross(N, T));
	mat3 TBN = transpose(mat3(T, B, N));

	TexCoords = textureScale * aTexCoords;
	Normal = mat3(transpose(inverse(model))) * aNormal;
	FragPos = vec3(model * vec4(aPos, 1.0));

	TangentLightPos = TBN * lightPos;
	TangentViewPos = TBN * viewPos;
	TangentFragPos = TBN * FragPos;

	ViewPos = viewPos;
	LightPos = lightPos;

	gl_Position = projection * view * model * vec4(aPos, 1.0);
}