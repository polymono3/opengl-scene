#version 330 core
in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

out vec4 FragColour;

struct Material
{
	// if using texture maps
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;

	// if not using texture maps
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;

	float shininess;
};

struct PointLight
{
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform samplerCube skybox;
uniform vec3 viewPos;
uniform Material material;
uniform PointLight pointLight;
uniform bool specular;

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, bool specularEnabled);

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	float ratio = 1.00 / 1.52;
	vec3 I = normalize(FragPos - viewPos);
	vec3 R = refract(I, norm, ratio);

	float alpha = texture(material.texture_diffuse1, TexCoords).a;

	float gamma = 2.2;
	if (alpha == 1.0)
	{
		vec3 result = CalcPointLight(pointLight, norm, FragPos, viewDir, specular);
		FragColour = vec4(result, alpha);
	}
	else
	{
		vec3 result = vec3(texture(skybox, R));
		FragColour = vec4(result, 1.0);
	}
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir, bool specularEnabled)
{
	vec3 lightDir = normalize(light.position - fragPos);
	vec3 reflectDir = reflect(-lightDir, normal);

	// ambient
	vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));

	// diffuse
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));

	vec3 specular = vec3(0.0, 0.0, 0.0);

	if(specularEnabled)
	{
		vec3 halfwayDir = normalize(viewDir + lightDir);
		float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
		specular = light.specular * spec * material.specular;
	}

	// attenuation
	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);
	ambient *= attenuation;
	diffuse *= attenuation;
	if (specularEnabled) specular *= attenuation;

	return (ambient + diffuse + specular);
}